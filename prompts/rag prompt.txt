rag_project/
├── manage.py
├── requirements.txt
├── .env
├── rag_project/
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   ├── wsgi.py
└── rag_app/
    ├── __init__.py
    ├── admin.py
    ├── apps.py
    ├── models.py
    ├── tests.py
    ├── urls.py
    └── views.py

- The codebase here is a rag system for a generative AI 
- It has a specialised dataset on local council data in a vector database that it retrieves 
- It is going to be called by a mobile applicaion so that users can query the AI about the council data
- I'm building a rag system for a generative AI
- I'm going to use python with Django to build the web service
- I'm using langchain to chunk the data
- I'm using open ai to do embeddings
- I'm using pinecone for vector database (free tier)
- PostgreSQL for a relational database
- I'm using amazon web services aws elastic beanstalk for web hosting (free tier)

-----------------

Notes:
- Whenever you give me code, give me the entire file, don't abbreviate
- Don't leave comments in the code, except for a single comment at the top of the file stating the file path, such as this: 
    - # File: open_party_rag/rag_app/views.py
- Give an explanation of the changes you made before the code

-----------------
#File: open_party_rag/open_party_rag/__init__.py
# This file is intentionally left blank.

#File: open_party_rag/open_party_rag/asgi.py

"""
ASGI config for open_party_rag project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'open_party_rag.settings')

application = get_asgi_application()
#File: open_party_rag/open_party_rag/settings.py
import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "your-secret-key")
DEBUG = os.getenv("DEBUG", "True") == "True"
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "*").split(",")

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rag_app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'open_party_rag.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'open_party_rag.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv("POSTGRES_DB", "defaultdb"),
        'USER': os.getenv("POSTGRES_USER", "your_postgres_user"),
        'PASSWORD': os.getenv("POSTGRES_PASSWORD", "your_postgres_password"),
        'HOST': os.getenv("POSTGRES_HOST", "your_postgres_host"),
        'PORT': os.getenv("POSTGRES_PORT", "5432"),
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

STATIC_URL = '/static/'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
#File: open_party_rag/open_party_rag/urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('rag/', include('rag_app.urls')),
]
#File: open_party_rag/open_party_rag/wsgi.py
import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'open_party_rag.settings')
application = get_wsgi_application()
#File: open_party_rag/rag_app/__init__.py
# This file is intentionally left blank.
#File: open_party_rag/rag_app/admin.py
from django.contrib import admin
# Register your models here if needed.
#File: open_party_rag/rag_app/apps.py
from django.apps import AppConfig

class RagAppConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'rag_app'
#File: open_party_rag/rag_app/models.py
from django.db import models

# Define your models here if needed for your RAG system.
#File: open_party_rag/rag_app/tests.py
from django.test import TestCase

# Create your tests here.
#File: open_party_rag/rag_app/urls.py
from django.urls import path
from .views import query_rag

urlpatterns = [
    path('query/', query_rag, name='query_rag'),
]
# File: open_party_rag/rag_app/views.py
import os
import json
from datetime import datetime
import openai
from pinecone import Pinecone, ServerlessSpec
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt

pc = Pinecone(api_key=os.getenv("PINECONE_API_KEY"))

INDEX_NAME = "rag-index"
if INDEX_NAME not in pc.list_indexes().names():
    sample_embedding = openai.Embedding.create(input="sample", model="text-embedding-ada-002")
    dimension = len(sample_embedding["data"][0]["embedding"])
    pc.create_index(
        name=INDEX_NAME,
        dimension=dimension,
        metric='euclidean',
        spec=ServerlessSpec(
            cloud='aws',
            region='us-west-2'
        )
    )

index = pc.Index(INDEX_NAME)

def get_embedding(text):
    response = openai.Embedding.create(
        input=text,
        model="text-embedding-ada-002"
    )
    return response["data"][0]["embedding"]

@csrf_exempt
def query_rag(request):
    if request.method == "POST":
        body = json.loads(request.body)
        user_query = body.get("query")
        query_embedding = get_embedding(user_query)
        results = index.query(vector=query_embedding, top_k=5, include_metadata=True)
        context = ""
        for item in results["matches"]:
            metadata = item["metadata"]
            context += "Source: " + metadata.get("source", "") + " Page: " + str(metadata.get("page", "")) + " Text: " + metadata.get("text", "") + "\n"
        prompt = "Context: " + context + "\nUser Query: " + user_query + "\nAnswer:"
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": prompt}
            ],
            temperature=0,
            max_tokens=512
        )
        answer = response["choices"][0]["message"]["content"]
        return JsonResponse({"answer": answer})
    return JsonResponse({"error": "Invalid request method"}, status=400)
#File: open_party_rag/venv/pyvenv.cfg
home = C:\Users\liamj\AppData\Local\Programs\Python\Python312
include-system-site-packages = false
version = 3.12.1
executable = C:\Users\liamj\AppData\Local\Programs\Python\Python312\python.exe
command = C:\Users\liamj\AppData\Local\Programs\Python\Python312\python.exe -m venv C:\Users\liamj\programming\open_party_rag\venv
#File: open_party_rag/.env
DJANGO_SECRET_KEY=your-secret-key
DEBUG=True
ALLOWED_HOSTS=*

OPENAI_API_KEY=sk-your-openai-key
PINECONE_API_KEY=your-pinecone-key
PINECONE_ENV=your-pinecone-env

POSTGRES_DB=defaultdb
POSTGRES_USER=your_postgres_user
POSTGRES_PASSWORD=your_postgres_password
POSTGRES_HOST=your_postgres_host
POSTGRES_PORT=5432
#File: open_party_rag/manage.py
#!/usr/bin/env python
import os
import sys

def main():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'open_party_rag.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError("Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?") from exc
    execute_from_command_line(sys.argv)

if __name__ == '__main__':
    main()
#File: open_party_rag/requirements.txt
Django==5.1.6
python-dotenv==1.0.1
langchain==0.3.19
openai==1.65.1
pinecone==6.0.0
psycopg[binary]==3.2.5

----------------------

When i run the above code, i get this error: 


(venv) PS C:\Users\liamj\programming\open_party_rag> python manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

Exception in thread django-main-thread:
Traceback (most recent call last):
  File "C:\Users\liamj\AppData\Local\Programs\Python\Python312\Lib\threading.py", line 1073, in _bootstrap_inner
    self.run()
  File "C:\Users\liamj\AppData\Local\Programs\Python\Python312\Lib\threading.py", line 1010, in run
    self._target(*self._args, **self._kwargs)
  File "C:\Users\liamj\programming\open_party_rag\venv\Lib\site-packages\django\utils\autoreload.py", line 64, in wrapper
    fn(*args, **kwargs)
  File "C:\Users\liamj\programming\open_party_rag\venv\Lib\site-packages\django\core\management\commands\runserver.py", line 134, in inner_run
    self.check(display_num_errors=True)
  File "C:\Users\liamj\programming\open_party_rag\venv\Lib\site-packages\django\core\management\base.py", line 486, in check
    all_issues = checks.run_checks(
                 ^^^^^^^^^^^^^^^^^^
  File "C:\Users\liamj\programming\open_party_rag\venv\Lib\site-packages\django\core\checks\registry.py", line 88, in run_checks
    new_errors = check(app_configs=app_configs, databases=databases)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\liamj\programming\open_party_rag\venv\Lib\site-packages\django\core\checks\urls.py", line 44, in check_url_namespaces_unique
    all_namespaces = _load_all_namespaces(resolver)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\liamj\programming\open_party_rag\venv\Lib\site-packages\django\core\checks\urls.py", line 63, in _load_all_namespaces
    url_patterns = getattr(resolver, "url_patterns", [])
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\liamj\programming\open_party_rag\venv\Lib\site-packages\django\utils\functional.py", line 47, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
                                         ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\liamj\programming\open_party_rag\venv\Lib\site-packages\django\urls\resolvers.py", line 718, in url_patterns
    patterns = getattr(self.urlconf_module, "urlpatterns", self.urlconf_module)
                       ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\liamj\programming\open_party_rag\venv\Lib\site-packages\django\utils\functional.py", line 47, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
                                         ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\liamj\programming\open_party_rag\venv\Lib\site-packages\django\urls\resolvers.py", line 711, in urlconf_module
    return import_module(self.urlconf_name)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\liamj\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py", line 90, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "<frozen importlib._bootstrap>", line 1387, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1360, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1331, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 935, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 994, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "C:\Users\liamj\programming\open_party_rag\open_party_rag\urls.py", line 7, in <module>
    path('rag/', include('rag_app.urls')),
                 ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\liamj\programming\open_party_rag\venv\Lib\site-packages\django\urls\conf.py", line 39, in include
    urlconf_module = import_module(urlconf_module)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\liamj\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py", line 90, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "<frozen importlib._bootstrap>", line 1387, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1360, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1331, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 935, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 994, in exec_module
  File "<frozen importlib._bootstrap>", line 488, in _call_with_frames_removed
  File "C:\Users\liamj\programming\open_party_rag\rag_app\urls.py", line 3, in <module>
    from .views import query_rag
  File "C:\Users\liamj\programming\open_party_rag\rag_app\views.py", line 13, in <module>
    if INDEX_NAME not in pc.list_indexes().names():
                         ^^^^^^^^^^^^^^^^^
  File "C:\Users\liamj\programming\open_party_rag\venv\Lib\site-packages\pinecone\control\pinecone.py", line 235, in list_indexes
    response = self.index_api.list_indexes()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\liamj\programming\open_party_rag\venv\Lib\site-packages\pinecone\openapi_support\endpoint.py", line 102, in __call__
    return self.callable(self, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\liamj\programming\open_party_rag\venv\Lib\site-packages\pinecone\core\openapi\db_control\api\manage_indexes_api.py", line 708, in __list_indexes
    return self.call_with_http_info(**kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\liamj\programming\open_party_rag\venv\Lib\site-packages\pinecone\openapi_support\endpoint.py", line 134, in call_with_http_info
    return self.api_client.call_api(
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\liamj\programming\open_party_rag\venv\Lib\site-packages\pinecone\openapi_support\api_client.py", line 300, in call_api
    return self.__call_api(
           ^^^^^^^^^^^^^^^^
  File "C:\Users\liamj\programming\open_party_rag\venv\Lib\site-packages\pinecone\openapi_support\api_client.py", line 178, in __call_api
    raise e
  File "C:\Users\liamj\programming\open_party_rag\venv\Lib\site-packages\pinecone\openapi_support\api_client.py", line 166, in __call_api
    response_data = self.request(
                    ^^^^^^^^^^^^^
  File "C:\Users\liamj\programming\open_party_rag\venv\Lib\site-packages\pinecone\openapi_support\api_client.py", line 354, in request
    return self.rest_client.GET(
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\liamj\programming\open_party_rag\venv\Lib\site-packages\pinecone\openapi_support\rest_utils.py", line 75, in GET
    return self.request(
           ^^^^^^^^^^^^^
  File "C:\Users\liamj\programming\open_party_rag\venv\Lib\site-packages\pinecone\openapi_support\rest_urllib3.py", line 260, in request
    return raise_exceptions_or_return(r)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\liamj\programming\open_party_rag\venv\Lib\site-packages\pinecone\openapi_support\rest_utils.py", line 38, in raise_exceptions_or_return
    raise UnauthorizedException(http_resp=r)
pinecone.openapi_support.exceptions.UnauthorizedException: (401)
Reason: Unauthorized
HTTP response headers: HTTPHeaderDict({'x-pinecone-api-version': '2025-01', 'X-Cloud-Trace-Context': '78fd0ab5413f3dc41f6e5b7d4c39eaf6', 'Date': 'Sat, 01 Mar 2025 07:57:02 GMT', 'Content-Type': 'text/html', 'Server': 'Google Frontend', 'Content-Length': '15', 'Via': '1.1 google', 'Alt-Svc': 'h3=":443"; ma=2592000,h3-29=":443"; ma=2592000'})
HTTP response body: Invalid API Key
